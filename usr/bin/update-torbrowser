#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

if [ ! "$tpo_downloader_debug" = "" ]; then
   if [ "$tpo_downloader_debug" -ge "1" ]; then
      set -x
   fi
fi

set -o pipefail
set -o errtrace

[ -n "$SCRIPTNAME" ] || SCRIPTNAME="$(basename "$BASH_SOURCE")"

ICON="/usr/share/icons/anon-icon-pack/tbupdate.ico"

## Developer comment on this script:
## I would be very happy if this script would not be required.
## Unfortunately, it is required. It works around a lot bugs:
## - There is no deb/rpm/whatever package with Tor Browser.
##   https://trac.torproject.org/projects/tor/ticket/5236
##   https://trac.torproject.org/projects/tor/ticket/3994
## - There is no way to keep Tor Browser updated.
##   (Thandy doesn't exist yet.)
## - There is no way to add the Documentation page well visible to Tor Browser:
##   https://trac.torproject.org/projects/tor/ticket/6025
##   https://trac.torproject.org/projects/tor/ticket/6053
## - Tor Browsers support for Isolating and Transparent Proxies is very limited:
##   https://trac.torproject.org/projects/tor/ticket/5611
## - tbb-scripts
##   https://github.com/adrelanos/tbb-scripts
## - Using torbrowser-launcher instead of tb-updater in Whonix
##   https://forums.whonix.org/t/using-torbrowser-launcher-instead-of-tb-updater-in-whonix/385

tb_exit_function() {
   trap "" ERR
   local exit_code
   exit_code="$1"

   if [ "$exit_code" = "0" ]; then
      exit 0
   fi

   if [ "$anon_shared_inst_tb" = "open" ]; then
      if [ "$tb_postinst" = "true" ]; then
         echo "\
INFO: Failing open. More info:
https://www.whonix.org/wiki/Tor_Browser#tb-updater_postinst"
      fi
      exit 0
   else
      if [ "$tb_postinst" = "true" ]; then
         echo "\
INFO: Failing closed. More info:
https://www.whonix.org/wiki/Tor_Browser#tb-updater_postinst"
      fi
      exit "$exit_code"
   fi
}

tb_error_handler() {
   local exit_code="$?"

   local MSG="<p>###########################################################
<br></br>## $SCRIPTNAME script bug.
<br></br>## No panic. Nothing is broken. Just some rare condition
<br></br>## has been hit. Try again later. There is likely a
<br></br>## solution for this problem. Please see the Whonix News,
<br></br>## Whonix User Help Forum and Whonix Documentation.
<br></br>## <a href=https://www.whonix.org/wiki/Tor_Browser>https://www.whonix.org/wiki/Tor_Browser</a>
<br></br>## Please report this bug!
<br></br>##
<br></br>## BASH_COMMAND: $BASH_COMMAND
<br></br>## exit_code: $exit_code
<br></br>##
<br></br>## output: $output
<br></br>## output_opts: ${output_opts[@]}
<br></br>## progressbaridx: $progressbaridx
<br></br>##
<br></br>## Experts only:
<br></br>## bash -x $SCRIPTNAME
<br></br>###########################################################</p>"

   [ -n "$tb_user_home" ] || tb_user_home=~
   [ -n "$tb_install_folder" ] || tb_install_folder="tb"

   mkdir --parents "$tb_user_home/.cache/$tb_install_folder"
   echo "$MSG" >> "$tb_user_home/.cache/$tb_install_folder/torbrowser_updater_error.log"

   ## In case variable output is not set yet.
   [ -n "$output" ] || output="output"

   ## In case function $output does not exist yet.
   if [ ! "$(type -t "$output")" = "function" ]; then
      output="echo"
   fi

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   $output ${output_opts[@]} --messagex --titlex "$TITLE" --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --titlecli "$TITLE" --typecli "error" --message "$MSG" --done
   tb_exit_function 1
}

trap "tb_error_handler" ERR

download_fail_help_set() {
   DOWNLOAD_FAIL_HELP="<p>Possible reasons:</p>
<p>
<br></br>- The download server is down.
<br></br>- File size exceeded (endless data attack triggered).
<br></br>- $tb_title Downloader (by Whonix developers) has been broken due to upstream changes.
</p>
<p>Recommendations:</p>
<p>
<br></br>- Try again later. If the error persists it probably won't solve itself before the next update.
<br></br>- Check News: <a href=https://www.whonix.org/wiki/Stay_Tuned>https://www.whonix.org/wiki/Stay_Tuned</a>
<br></br>- Manually update: <a href=https://www.whonix.org/wiki/Manually_Updating_Tor_Browser>https://www.whonix.org/wiki/Manually_Updating_Tor_Browser</a>
</p>"
}

tb_run_function() {
   case $tb_skip_functions in
   *"$@"*) echo "INFO: Skipping $@, because tb_skip_functions includes it."
                  return 0
                  ;;
   esac

   true "INFO: Running $@, because tb_skip_functions does not include it."
   eval "$@"
}

root_check() {
   if echo "$@" | grep -q "\-\-postinst" ; then
      return 0
   fi

   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "ERROR: Do not run $SCRIPTNAME as root!"
      tb_exit_function 2
   fi
}

tb_sanity_tests() {
   command -v id >/dev/null
   command -v basename >/dev/null
   command -v touch >/dev/null
   command -v uname >/dev/null
   command -v mkdir >/dev/null
   command -v pidof >/dev/null
   command -v chmod >/dev/null
   command -v cp >/dev/null
   command -v mv >/dev/null
   command -v killall >/dev/null
   command -v rm >/dev/null
   command -v head >/dev/null
   command -v tar >/dev/null
   command -v date >/dev/null
   command -v /usr/lib/msgcollector/msgcollector >/dev/null
   command -v /usr/lib/msgcollector/pv_wrapper >/dev/null
   ## tbbversion function
   command -v grep >/dev/null
   ## tbbversion function
   command -v sed >/dev/null
   command -v sort >/dev/null
   command -v pv >/dev/null
   command -v mkfifo >/dev/null
}

tb_ex_funct() {
   local MSG
   MSG="$SIGNAL_TYPE received. Cleaning up..."

   if [ "$last_pid_list" = "" ]; then
      true
   else
      for pid in $last_pid_list; do
         kill -1 "$pid"
      done
   fi

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done

   #MSG="Aborted."
   #$output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
   #$output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done

   MSG="$SIGNAL_TYPE received. Exiting."
   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
}

tb_signal_sigterm() {
   SIGNAL_TYPE="sigterm"
   tb_ex_funct
   tb_exit_function 143
}

trap "tb_signal_sigterm" SIGTERM

tb_signal_sigint() {
   SIGNAL_TYPE="sigint"
   tb_ex_funct
   tb_exit_function 130
}

trap "tb_signal_sigint" SIGINT ## ctrl + c

trap_sigusr2() {
   SIGNAL_TYPE="SIGUSR2"
   tb_ex_funct
   tb_exit_function 3
}

trap "trap_sigusr2" SIGUSR2 ## msgcollector, zenity cancel button

tb_parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --ordinary)
               ordinary="true"
               shift
               ;;
           --update)
               true ## legacy
               shift
               ;;
           --noask)
               TB_FORCE_INSTALL="1"
               shift
               ;;
           --nokilltb)
               NOKILLTB="1"
               shift
               ;;
           --devbuildpassthrough)
               TB_FORCE_INSTALL="1"
               DEV_BUILD_PASSTHROUGH="1"
               DEV_PASSTHROUGH="1"
               ## Use export so it can be read by CURL_PRGRS.
               [ -n "$TB_USE_MSGCOLLECTOR" ] || export TB_USE_MSGCOLLECTOR="false"
               shift
               ;;
           --postinst)
               tb_postinst="true"
               shift
               ;;
           --is-chroot)
               is_chroot="true"
               shift
               ;;
           --noaskstart)
               noaskstart="true"
               shift
               ;;
           --language)
               TB_LANG="$2"
               shift 2
               ;;
           --no-tor-con-check)
               TB_NO_TOR_CON_CHECK="1"
               shift 1
               ;;
           --input)
               TB_INPUT="$2"
               shift 2
               ;;
           --no-install)
               TB_NO_INSTALL="true"
               shift
               ;;
           --resume)
               CURL_RESUME="-C -"
               ## XXX: Looks like curl-prgrs does not support '-C -'.
               ##      Therefore also implying '--ordinary' progress bar when
               ##      using --resume.
               [ -n "$ordinary" ] || ordinary="true"
               shift
               ;;
           --i2p)
               ## This option downloads a Tor Browser Bundle to a custom path,
               ## intended to be used with i2p. It does no modification to the
               ## browser itself.
               IDENTIFIER="i2pbrowser-downloader"
               tb_install_folder="i2pb"
               tb_install_folder_dot=".i2pb"
               tb_name="i2p"
               tb_title="i2p Browser"
               tb_wiki="i2p_Browser"
               tb_browser_name="i2p-browser"
               tb_settings_folder="i2pbrowser.d"
               tb_proxy_name="i2p"
               tb_bin="i2pbrowser"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               tb_exit_function 4
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
   true "$BASH_SOURCE \$@: $@"
}

tb_stdin() {
   if [ ! "$TB_INPUT" = "" ]; then
      true "INFO: TB_INPUT is already set to $TB_INPUT, skipping auto detection, ok."
      return 0
   fi
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      output_echo_only "INFO: TB_FORCE_INSTALL is set to '1', therefore setting TB_INPUT to 'none'."
      TB_INPUT="none"
      TB_USE_MSGCOLLECTOR="false"
      return 0
   fi
   if [ -t "0" ]; then
      output_echo_only "INFO: stdin connected to terminal, setting \
TB_INPUT to stdin, will use terminal for input, ok."
      output_echo_only "INFO: Alternatively, if want to run from \
command line, but still use the graphical user interface for input, \
you could add to command line: --input gui"
      TB_INPUT="stdin"
      TB_USE_MSGCOLLECTOR="false"
      return 0
   fi
   output_echo_only "INFO: stdin not connected to terminal, probably run in graphical environment, ok."
}

tb_qubes_dvm_template() {
   if echo "$qubes_vm_name" | grep -q --invert-match "\-dvm" ; then
      output_echo_only "INFO: not running inside Qubes DVM Template, ok."
      return 0
   fi

   local MSG="\
<p>Do not run $tb_title in Qubes DVM Template!<br></br>
<br></br>
More info: <a href=https://www.whonix.org/wiki/Tor_Browser#Running_Tor_Browser_in_Qubes_DVM_Template>https://www.whonix.org/wiki/Tor_Browser#Running_Tor_Browser_in_Qubes_DVM_Template</a></p>"

   $output ${output_opts[@]} --messagex --titlex "$TITLE" --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --titlecli "$TITLE" --typecli "error" --message "$MSG" --done
   tb_exit_function 1
}

output_echo_only() {
   local MSG
   MSG="$@"
   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
}

output() {
   outputfunc "$@"
}

outputfunc() {
   true "$FUNCNAME: args: ${1+$@}"
   if [ "$output_tool" = "" ]; then
      local TB_USE_MSGCOLLECTOR
      TB_USE_MSGCOLLECTOR="false"
   fi
   if [ "$TB_USE_MSGCOLLECTOR" = "false" ]; then
      while true; do
         case $1 in
            --messagex)
               ## Only show --messagecli. Skip --messagex.
               return 0
               ;;
            --message)
               local MSG
               MSG="$2"
               shift 2
               break
               ;;
            *)
               break
               ;;
         esac
      done
      MSG="$(/usr/lib/msgcollector/striphtml "$MSG")"
      if [ ! "$MSG" = "" ]; then
         echo "$MSG"
      fi
   elif [ "$outputfunc_verbose" = "true" ]; then
      echo "Running: bash -x $output_tool --identifier $IDENTIFIER --whoami $who_ami ${1+$@}"
      bash -x $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" "$@"
   else
      $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" "$@"
   fi
   true
}

## Make it visible to curl-prgrs.
export -f output
export -f outputfunc

tb_config_folder_parser() {
   shopt -s nullglob
   local i
   for i in /etc/${tb_settings_folder}/*.conf /rw/config/${tb_settings_folder}/*.conf; do
      bash -n "$i"
      source "$i"
   done
}

tb_settings_chroot_common() {
   ## Do not run in chroot if tb_install_in_chroot=false.
   if [ ! "$tb_install_in_chroot" = "false" ]; then
      [ -n "$tb_updater_run" ] || tb_updater_run=true
   fi
   ## Fail closed, if there was an error.
   [ -n "$anon_shared_inst_tb" ] || anon_shared_inst_tb=closed
   ## Skip Tor connectivity check when running inside chroot.
   [ -n "$TB_NO_TOR_CON_CHECK" ] || TB_NO_TOR_CON_CHECK="1"
   ## Hack to disable using proxy settings when running inside chroot.
   ## We are using --fail anyhow. No problem to duplicate it.
   [ -n "$CURL_PROXY" ] || CURL_PROXY="--fail"

   [ -n "$tb_disable_anon_ws_dnf_conf" ] || tb_disable_anon_ws_dnf_conf=true

   if [ "$tb_disable_anon_ws_dnf_conf" = "true" ]; then
      ## Check if /etc/resolv.conf is a symlink. This is only the case
      ## when anon-ws-dns-conf is already installed.
      if test -h /etc/resolv.conf ; then
         if test -x /var/lib/dpkg/info/anon-ws-dns-conf.prerm ; then
            [ -n "$tb_reenable_anon_ws_dnf_conf" ] || tb_reenable_anon_ws_dnf_conf=true
            ## Restore original /etc/resolv.conf.
            bash -x /var/lib/dpkg/info/anon-ws-dns-conf.prerm remove
         fi
      fi
   fi
}

tb_settings_postinst_common() {
   ## Skip update [version] confirmation messages when running with
   ## --postinst, because we will be using hardcoded version numbers.
   [ -n "$tb_confirm_update_skip" ] || tb_confirm_update_skip=true
   ## Skip installation confirmation messages when running with
   ## --postinst, because we will be using hardcoded version numbers.
   ## Downgrade / free attacks should not be possible, because file names
   ## that include the version number will be verified from the gpg verified
   ## sha256sum sums file.
   [ -n "$tb_confirm_installation_skip" ] || tb_confirm_installation_skip=true

   [ -n "$NOKILLTB" ] || NOKILLTB="1"
   [ -n "$noaskstart" ] || noaskstart="true"
   [ -n "$TB_INPUT" ] || TB_INPUT="none"
   ## Use export so it can be read by CURL_PRGRS.
   [ -n "$TB_USE_MSGCOLLECTOR" ] || export TB_USE_MSGCOLLECTOR="false"
   ## Using hardcoded version numbers when running with --postinst.
   [ -n "$tbb_version" ] || tbb_version="$tbb_hardcoded_version"
   [ -n "$tbb_use_hardcoded_version" ] || tbb_use_hardcoded_version="true"

   ## Fail open, if there was an error.
   [ -n "$anon_shared_inst_tb" ] || anon_shared_inst_tb=open
}

tb_settings_qubes_common_templatevm() {
   ## Skip Tor connectivity check when running inside Qubes TempalteVM,
   ## because since Qubes R4 TemplateVMs are non-networked by default.
   [ -n "$TB_NO_TOR_CON_CHECK" ] || TB_NO_TOR_CON_CHECK="1"
}

tb_settings_qubes_postinst_templatevm() {
   ## Do not run during Qubes TempalteVM postinst if tb_install_follow=false.
   if [ ! "$tb_install_follow" = "false" ]; then
      [ -n "$tb_updater_run" ] || tb_updater_run=true
   fi
   if [ "$tb_user_home" = "" ]; then
      tb_user_home="/var/cache/tb-binary"
      tb_auto_set_user_home_msg="Automatically setting download folder to $tb_user_home, because running inside Qubes TemplateVM and from postinst. \
This is useful so you get up to date versions of $tb_title in newly created AppVMs inherited from updated TemplateVMs.
More info: https://www.whonix.org/wiki/Tor_Browser#Qubes_specific"
   fi
}

tb_settings_qubes_manual_run_templatevm() {
   [ -n "$tb_updater_run" ] || tb_updater_run=true
   if [ "$tb_user_home" = "" ]; then
      tb_user_home="/var/cache/tb-binary"
      tb_auto_set_user_home_msg="Automatically setting download folder to $tb_user_home, because running inside Qubes TemplateVM but not run from postinst. \
This is useful so you get up to date versions of $tb_title in newly created AppVMs inherited from updated TemplateVMs.
More info: https://www.whonix.org/wiki/Tor_Browser#Qubes_specific"
   fi
}

tb_settings_manual_run_common() {
   [ -n "$tb_updater_run" ] || tb_updater_run=true
}

tb_preparation() {
   ## sets: tbb_hardcoded_version
   source /usr/share/tb-updater/tbb_hardcoded_version

   if [ ! "$tb_postinst" = "true" ]; then
      [ -n "$tb_manual_run" ] || tb_manual_run=true
   fi

   if command -v qubesdb-read >/dev/null 2>&1 ; then
      [ -n "$is_qubes" ] || is_qubes=true

      if [ "$qubes_vm_type" = "" ]; then
         ## Works since Qubes R3.2.
         if [ -e /var/run/qubes/this-is-appvm ]; then
            qubes_vm_type="AppVM"
         fi
         if [ -e /var/run/qubes/this-is-netvm ]; then
            qubes_vm_type="NetVM"
         fi
         if [ -e /var/run/qubes/this-is-templatevm ]; then
            qubes_vm_type="TemplateVM"
         fi
         if [ "$is_chroot" = "true" ]; then
            qubes_vm_type="TemplateVM"
         fi
      fi
      ## qubesdb-read fails
      ## - inside chroot,
      ## - perhaps during upgrades
      ##   - https://github.com/QubesOS/qubes-issues/issues/2497
      ##   - https://github.com/QubesOS/qubes-issues/issues/2509
      ## therefore overwriting with '|| true'.
      [ -n "$qubes_vm_name" ] || qubes_vm_name="$(qubesdb-read /name)" || true
      ## For Qubes R3.1 compatibility.
      [ -n "$qubes_vm_type" ] || qubes_vm_type="$(qubesdb-read /qubes-vm-type)" || true

   else
      [ -n "$is_qubes" ] || is_qubes=false
   fi

   if [ "$is_chroot" = "true" ]; then
      tb_settings_chroot_common
   fi

   if [ "$qubes_vm_type" = "TemplateVM" ]; then
      tb_settings_qubes_common_templatevm
   fi

   if [ "$tb_postinst" = "true" ]; then
      tb_settings_postinst_common
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         tb_settings_qubes_postinst_templatevm
      fi
   fi

   if [ "$tb_manual_run" = "true" ]; then
      tb_settings_manual_run_common
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         tb_settings_qubes_manual_run_templatevm
      fi
   fi

   if [ "$tb_user_home" = "" ]; then
      tb_user_home=~
      ## In case of running as root from postinst.
      if [ "$tb_user_home" = "/root" ] || [ "$(whoami)" = "root" ]; then
         tb_user_home="/var/cache/tb-binary"
         tb_auto_set_user_home_msg="Automatically setting download folder to $tb_user_home, because running as root."
      fi
   fi

   [ -n "$IDENTIFIER" ] || IDENTIFIER="torbrowser-downloader"
   [ -n "$tb_install_folder" ] || tb_install_folder="tb"
   [ -n "$tb_install_folder_dot" ] || tb_install_folder_dot=".tb"
   [ -n "$tb_name" ] || tb_name="tor"
   [ -n "$tb_title" ] || tb_title="Tor Browser"
   [ -n "$tb_wiki" ] || tb_wiki="Tor_Browser"
   [ -n "$tb_browser_name" ] || tb_browser_name="tor-browser"
   [ -n "$tb_settings_folder" ] || tb_settings_folder="torbrowser.d"
   [ -n "$tb_bin" ] || tb_bin="torbrowser"

   [ -n "$tb_home_folder" ] || tb_home_folder="$tb_user_home/$tb_install_folder_dot"
   [ -n "$tb_browser_folder" ] || tb_browser_folder="$tb_home_folder/$tb_browser_name"
   [ -n "$tb_cache_folder" ] || tb_cache_folder="$tb_user_home/.cache/$tb_install_folder"
   [ -n "$tb_temp_folder" ] || tb_temp_folder="$tb_cache_folder/temp"
   [ -n "$tb_downloaded_files_folder" ] || tb_downloaded_files_folder="$tb_cache_folder/files"
   [ -n "$tb_gpg_tmp_dir" ] || tb_gpg_tmp_dir="$tb_cache_folder/gpgtmpdir"
   [ -n "$tb_extract_temp_folder" ] || tb_extract_temp_folder="$tb_cache_folder/$tb_browser_name"

   if [ ! "$tb_updater_run" = "true" ]; then
      tb_exit_function 0
   fi

   if [ "$tb_postinst" = "true" ]; then
      ## Being careful with deletion.
      if [ "$tb_downloaded_files_folder" = "/var/cache/tb-binary/.cache/$tb_install_folder/files" ]; then
         echo "rm -r -f '$tb_downloaded_files_folder'"
         rm -r -f "$tb_downloaded_files_folder"
      fi
   fi

   ## Required for /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh.
   TEMP_DIR="$tb_temp_folder"
   export TEMP_DIR
   rm --recursive --force "$TEMP_DIR"
   mkdir --parents "$TEMP_DIR"

   ## Fortunately, on linux-image-486 kernel, while "uname --all" returns for example
   ## "Linux host 3.2.0-4-486 #1 Debian 3.2.41-2 i686 GNU/Linux",
   ## "uname --machine" returns "i686" and Tor Browser works fine with linux-image-486 kernel.
   ## (There are no 486 downloads for Tor Browser.)
   ##ARCH="x86_64"
   ##ARCH="i686"
   if [ "$ARCH" = "" ]; then
      echo "INFO: Auto detecting ARCH..."
      ARCH="$(uname --machine)"
      echo "INFO: ARCH $ARCH detected."
   else
      echo "INFO: Skipping auto detecting ARCH because already set."
      echo "INFO: ARCH is set to $ARCH."
   fi

   if [ "$ARCH_DOWNLOAD" = "" ]; then
      echo "INFO: Auto detecting ARCH_DOWNLOAD..."
      if [ "$ARCH" = "i386" ]; then
         [ -n "$ARCH_DOWNLOAD" ] || ARCH_DOWNLOAD="linux32"
      elif [ "$ARCH" = "i686" ]; then
         [ -n "$ARCH_DOWNLOAD" ] || ARCH_DOWNLOAD="linux32"
      else
         ## NOTE: A simple else is non-ideal, should there be ever more architectures.
         [ -n "$ARCH_DOWNLOAD" ] || ARCH_DOWNLOAD="linux64"
      fi
      echo "INFO: ARCH_DOWNLOAD $ARCH_DOWNLOAD detected."
   else
      echo "INFO: Skipping auto detecting ARCH_DOWNLOAD because already set."
      echo "INFO: ARCH_DOWNLOAD is set to $ARCH_DOWNLOAD."
   fi

   ## provides tbbversion function
   source /usr/lib/tbbversion_parser

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   if [ "$my_tty" = "" ]; then
      local my_tty_exit_code
      my_tty_exit_code="0"
      my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };
      if [ ! "$my_tty_exit_code" = "0" ]; then
         my_tty="none"
      fi
      ## Just in case.
      if [ "$my_tty" = "" ]; then
         my_tty="none"
      fi
   fi

   who_ami="$(whoami)"

   TITLE="$tb_name Browser Downloader (by Whonix developers)"

   output_tool="/usr/lib/msgcollector/msgcollector"
   output="output"

   $output --icon "$ICON"
   $output --parenttty "$my_tty"
   $output --whoami "$who_ami"
   $output --titlex "$TITLE"
   $output --titlecli "$TITLE"

   ## Make visible to curl-prgrs.
   export output_tool
   export output
   export IDENTIFIER
   export who_ami

   ret="0"
   command -v curl.anondist-orig >/dev/null || { ret="$?" ; true; };

   if [ "$ret" = "0" ]; then
      ## using the non-uwt-wrapped version, if the uwt wrapper is installed,
      ## which is the case on a default Whonix installation
      CURL=curl.anondist-orig
   else
      ret="0"
      command -v curl >/dev/null || { ret="$?" ; true; };
      if [ "$ret" = "0" ]; then
         ## falling back to real curl, if the uwt wrapper has been uninstalled
         CURL=curl
      else
         local MSG="uwt_tool: Can not find curl. Please report this bug!"
         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
         EXIT_CODE="1"
         return 0
      fi
   fi

   if [ "$CURL_PRGRS" = "" ]; then
      if [ "$ordinary" = "true" ]; then
         CURL_PRGRS="$CURL"
      elif [ -x /usr/lib/curl-scripts/curl-prgrs ]; then
         ## Curl progress wrapper.
         CURL_PRGRS="/usr/lib/curl-scripts/curl-prgrs"
      else
         true "/usr/lib/curl-scripts/curl-prgrs not available, skipping."
         true "Setting CURL_PRGRS to $CURL."
         CURL_PRGRS="$CURL"
      fi
   fi

   ## Debugging CURL_PRGRS.
   #CURL_PRGRS="bash -x /usr/lib/curl-scripts/curl-prgrs"

   ## Debugging / disabling CURL_PRGRS.
   #CURL_PRGRS="$CURL"

   ## Export CURL variable, so it can be read by $CURL_PRGRS.
   export CURL

   mkdir --parents "$tb_home_folder"
   mkdir --parents "$tb_cache_folder"
   mkdir --parents "$tb_downloaded_files_folder"

   ## {{ Download from the torproject.org clearnet by default instead from
   ##    their hidden service.

   [ -n "$tbb_download_base_url" ] || tbb_download_base_url="https://dist.torproject.org"
   [ -n "$TBB_REMOTE_FOLDER" ] || TBB_REMOTE_FOLDER="$tbb_download_base_url/torbrowser"
   [ -n "$CURL_FORCE_SSL" ] || CURL_FORCE_SSL="--tlsv1.2 --proto =https"

   ## }}

   if [ "$DEV_PASSTHROUGH" = "1" ]; then
      [ -n "$CURL_PROXY" ] || CURL_PROXY=""
   elif [ -f /usr/share/anon-dist/marker ]; then
      ## sets: GATEWAY_IP
      eval $(/usr/lib/anon-shared-helper-scripts/settings_echo)
      [ -n "$SOCKS_PORT_TBB_DOWNLOAD" ] || SOCKS_PORT_TBB_DOWNLOAD="9115"
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         ## Use Qubes updates proxy.
         if [ "$CURL_PROXY" = "" ]; then
            source /usr/lib/qubes-whonix/utility_functions.sh
            CURL_PROXY="--proxy $PROXY_SERVER"
         fi
      else
         if [ "$socks_user_name" = "" ]; then
            local uuid_temp
            uuid_temp="$(cat "/proc/sys/kernel/random/uuid")"
            socks_user_name="tb-updater"
            socks_user_name="${socks_user_name}_${uuid_temp}"
         fi
         [ -n "$CURL_PROXY" ] || CURL_PROXY="--proxy socks5h://$socks_user_name:password@$GATEWAY_IP:$SOCKS_PORT_TBB_DOWNLOAD"
      fi
   else
      [ -n "$CURL_PROXY" ] || CURL_PROXY=""
   fi

   output_echo_only "INFO: CURL_PROXY: $CURL_PROXY"

   ## Also used by function tbbversion.
   [ -n "$RecommendedTBBVersions" ] || RecommendedTBBVersions="$tb_cache_folder/RecommendedTBBVersions"

   [ -n "$tbb_version_last_downloaded_save_file" ] || tbb_version_last_downloaded_save_file="$tb_cache_folder/tbb_version_last_downloaded_save_file"

   if [ -f "$tbb_version_last_downloaded_save_file" ]; then
      [ -n "$tbb_version_previous_downloaded_version" ] || tbb_version_previous_downloaded_version="$(cat "$tbb_version_last_downloaded_save_file")"
   fi
   [ -n "$tbb_version_previous_downloaded_version" ] || tbb_version_previous_downloaded_version="none"

   if [ ! "$tb_auto_set_user_home_msg" = "" ]; then
      output_echo_only "INFO: $tb_auto_set_user_home_msg"
   fi

   output_echo_only "INFO: tbb_version_previous_downloaded_version: $tbb_version_previous_downloaded_version"
}

tb_skip_if_higher_or_equal_version_already_downloaded() {
   if [ ! "$tb_postinst" = "true" ]; then
      return 0
   fi
   if [ "$tbb_version_previous_downloaded_version" = "none" ]; then
      return 0
   fi
   if [ "$tbb_version" = "" ]; then
      return 0
   fi
   if dpkg --compare-versions "$tbb_version_previous_downloaded_version" ge "$tbb_version" ; then
      output_echo_only "INFO: tbb_version_previous_downloaded_version: $tbb_version_previous_downloaded_version is greater or equal $tbb_version, therefore skipping to download, ok."
      tb_exit_function 0
   fi
}

tb_connectivity_checks_tor() {
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      return 0
   fi

   if [ "$TB_NO_TOR_CON_CHECK" = "1" ]; then
      return 0
   fi

   if [ "$CURL_PROXY" = "" ]; then
      return 0
   fi

   if [ -x /usr/lib/anon-shared-helper-scripts/tor_enabled_check ]; then
      echo -n "INFO: Running Tor enabled check... "

      source /usr/lib/anon-shared-helper-scripts/tor_enabled_check
      ## sets: TOR_ENABLED
      check_tor_enabled_do

      if [ "$TOR_ENABLED" = "0" ]; then
         MSG="<p><b>Tor not enabled yet.</b></p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>Run whonixcheck on Whonix-Gateway as well.</p>

<p>If whonixcheck reports no problems with internet activity and downloading $tb_title still fails, please report a bug!</p>

<p>Debugging information:<br />
You could use <code>--no-tor-con-check</code> if you think function <code>$FUNCNAME</code> should be skipped.</p>"

         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
         tb_exit_function 5
      fi
      echo "Done."
   else
      true "/usr/lib/anon-shared-helper-scripts/tor_enabled_check does not exist, skipping."
   fi

   if [ -x /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh ]; then
      echo -n "INFO: Running Tor bootstrap check... "
      source /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh
      ## sets: tor_bootstrap_percent
      tb_run_function check_tor_circuit_established

      if [ ! "$tor_circuit_established" = "1" ]; then
         MSG="<p></b>Tor not fully bootstrapped.</b></p>

<p>Possible reasons:
<br></br>- no internet connectivity</p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>Run whonixcheck on Whonix-Gateway as well.</p>

<p>If whonixcheck reports no problems with internet activity and downloading $tb_title still fails, please report a bug!</p>"

         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
         tb_exit_function 6
      fi
      echo "Done."
   else
      true "/usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh not available, skipping."
   fi

   true "Tor fully bootstrapped."
}

tb_connectivity_checks_curl() {
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      return 0
   fi

   tb_notify_details="Checking connectivity... Will take a moment..."
   echo "INFO: Running connectivity check... "

   [ -n "$timeout_connectivity_checks_curl" ] || timeout_connectivity_checks_curl=180
   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$tb_temp_folder/tbb_remote_folder"
   rm -f "$CURL_OUT_FILE"
   curl_download_max_time="$timeout_connectivity_checks_curl"
   curl_download_target_url="$tbb_download_base_url"
   tb_download_common_exit_on_fail="false"
   tb_download_common

   ## Check if curl failed.
   if [ ! "$curl_exit_code" = "0" ]; then
      MSG="<p>$curl_download_target_url could not be reached.</p>

<p>Possible reasons:
<br></br>- $TBB_REMOTE_FOLDER is down
<br></br>- download location changed</p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>If whonixcheck reports no problems with internet activity and downloading $tb_title keeps failing, please report a bug!</p>

<p>(Debugging information: curl_status_message: $curl_status_message)</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      tb_exit_function 7
   fi

   echo "INFO: Connectivity check succeeded."
}

tb_update_check() {
   if [ ! "$tbb_version" = "" ]; then
      true "INFO: tbb_version already set to '$tbb_version'. Skipping $FUNCNAME, ok."
      return 0
   fi

   ## do not re-download Tor Browser if a previous build already did
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      if [ -d "$tb_browser_folder" ]; then
         echo "$SCRIPTNAME: Not downloading $tb_title again, because $tb_browser_folder already exists."
         tb_exit_function 0
      fi
   fi

   [ -n "$TBB_VERSIONS_FILE_LINK" ] || TBB_VERSIONS_FILE_LINK="https://www.torproject.org/projects/torbrowser/RecommendedTBBVersions"

   tb_notify_details="Checking $tb_title version... Will take a moment..."
   output_echo_only "INFO: Find out latest version... Downloading: $TBB_VERSIONS_FILE_LINK... "

   [ -n "$timeout_version_file_download" ] || timeout_version_file_download=180
   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$RecommendedTBBVersions"
   rm -f "$CURL_OUT_FILE"
   curl_download_max_time="$timeout_version_file_download"
   curl_download_target_url="$TBB_VERSIONS_FILE_LINK"
   tb_download_common_exit_on_fail="8"
   tb_download_common

   test -f "$RecommendedTBBVersions"
}

tb_remote_version_parser() {
   if [ ! "$tbb_version" = "" ]; then
      true "INFO: tbb_version already set to '$tbb_version'. Simplified $FUNCNAME, ok."
      [ -n "$tbb_recommended_versions_list" ] || tbb_recommended_versions_list="$tbb_version"
      [ -n "$tbbversions_found" ] || tbbversions_found=1
      [ -n "$tbb_recommended_versions_error" ] || tbb_recommended_versions_error=""
      return 0
   fi

   ## needs: $RecommendedTBBVersions
   ## sets: tbb_recommended_versions_list
   ## sets: tbbversions_found
   ## sets: tbb_recommended_versions_error
   tb_run_function tbbversion
}

tb_remote_version_sanity_test() {
   if [ "$tbb_recommended_versions_list" = "UNKNOWN" ]; then
      download_fail_help_set
      local MSG="<p>$installed_or_not_text</p>

<p>Could not find out latest $tb_title version! $tbb_recommended_versions_error</p>

<p>$DOWNLOAD_FAIL_HELP</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      tb_exit_function 9
   fi
}

tb_local_version_detection() {
   ## Used by tbbversion_installed
   [ -n "$tbb_folder" ] || tbb_folder="$tb_browser_folder"

   ## sets: tbb_locally_installed_version
   ## sets: tbb_locally_installed_version_detect_success
   tb_run_function tbbversion_installed

   if [ -d "$tb_browser_folder" ]; then
      installed_or_not_result="true"
      installed_or_not_text=""
   else
      installed_or_not_result="false"
      installed_or_not_text="$tb_title is currently not installed.
(Folder $tb_browser_folder does not exist.)"
   fi
}

tb_confirm_update() {
   if [ "$qubes_vm_type" = "TemplateVM" ]; then
      local folder_name found
      for folder_name in "/home/$who_ami/$tb_install_folder_dot" "/home/$who_ami/.cache/${tb_install_folder}" ; do
         if [ -d "$folder_name" ]; then
            found=true
            break
         fi
      done
      if [ "$found" = "true" ]; then
         local MSG="\
<p>Obsolete folders exist. It is recommended to delete them. \
Otherwise updating $tb_title in this TemplateVM will not result in newly created TemplateBasedVMs to inherit the updated version of $tb_title.
<br />
<br />To delete these obsolete folders, please run:
<br />
<br /><code>rm -r -f '/home/$who_ami/$tb_install_folder_dot'</code>
<br /><code>rm -r -f '/home/$who_ami/.cache/${tb_install_folder}'</code>
<br />
<br />(Or delete them using a file manager.)
<br />
<br />More info: <a href=https://www.whonix.org/wiki/Tor_Browser#Qubes_specific>https://www.whonix.org/wiki/Tor_Browser#Qubes_specific</a></p>"
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
      fi
   fi

   output_echo_only "INFO: Currently installed version: $tbb_locally_installed_version"
   if [ "$tbb_use_hardcoded_version" = "true" ]; then
      output_echo_only "INFO: Hardcoded version $tbb_version chosen."
   fi
   if [ "$tb_confirm_update_skip" = "true" ]; then
      return 0
   fi

   if [ "$tbb_locally_installed_version_detect_success" = "1" ]; then
      if [ "$installed_or_not_result" = "true" ]; then
         local tbb_compare_version
         for tbb_compare_version in $tbb_recommended_versions_list; do
            local dpkg_compare_versions_equals_exit_code="0"
            dpkg --compare-versions "$tbb_compare_version" eq "$tbb_locally_installed_version" || { dpkg_compare_versions_equals_exit_code="$?" ; true; };
            if [ "$dpkg_compare_versions_equals_exit_code" = "0" ]; then
               break
            fi
            local dpkg_compare_versions_greater_than_exit_code="0"
            dpkg --compare-versions "$tbb_compare_version" gt "$tbb_locally_installed_version" || { dpkg_compare_versions_greater_than_exit_code="$?" ; true; };
            if [ "$dpkg_compare_versions_greater_than_exit_code" = "0" ]; then
               break
            fi
            local dpkg_compare_versions_lower_than_exit_code="0"
            dpkg --compare-versions "$tbb_compare_version" lt "$tbb_locally_installed_version" || { dpkg_compare_versions_lower_than_exit_code="$?" ; true; };
            #if [ "$dpkg_compare_versions_lower_than_exit_code" = "0" ]; then
               #break
            #fi
         done
      fi
   fi

   local MSG question button type
   button="yesno"
   question="Download now?"

   local highest_version_not_always_better_text updater_vs_downloader_msg confirmation_screen_learn_more_link

   highest_version_not_always_better_text="\
Only versions still considered secure should be listed here. Higher version numbers does not necessarily mean more secure here. Could be alpha or beta versions. In most cases you are best off choosing the lowest version number among them."

   updater_vs_downloader_msg="\
Since The Tor Project configured TBB to automatically update itself,
if you would like to keep your browser profile and update rather than re-downloading TBB, you are better off using \
<a href=https://www.whonix.org/wiki/Tor_Browser/Internal_Updater>$tb_title's internal updater</a>. \
In that case, say no now.<br></br>
<br></br>

This program \
(<a href=https://www.whonix.org/wiki/Tor_Browser/Downloader_by_Whonix>$tb_title Downloader (Whonix)</a>) \
is incapable of keeping user data.<br></br>
YOUR BROWSER WILL BE KILLED.<br></br>
YOUR WHOLE BROWSER PROFILE INCLUDING BOOKMARKS AND PASSWORDS WILL GET REPLACED.<br></br>
<br></br>
A backup of your old $tb_title and settings will be created in folder <code>$tb_home_folder</code>.
<br></br>It is a good idea to delete old TBB backups once in a while if you are running low with disk space."

   confirmation_screen_learn_more_link="\
<a href=https://www.whonix.org/wiki/Tor_Browser/Download_Confirmation_Screen>Learn more about this Download Confirmation Screen.</a>"

   if [ "$qubes_vm_type" = "TemplateVM" ]; then
      qubes_running_inside_template_vm_msg="\
<u>Qubes specific notice</u>: Currently running inside a TemplateVM.
Due to <a href=https://www.whonix.org/wiki/Dev/Qubes#tb-updater_vs_TemplateVM>technical limitations</a>,
running this program in this TemplateVM will not update $tb_title in TemplateBasedVMs, which are based on this TemplateVM.
Only newly created TemplateBasedVMs, which are based on this TemplateVM will benefit from this.
To update $tb_title inside existing TemplateBasedVMs, please update $tb_title inside TemplateBasedVMs."
   fi

   if [ "$installed_or_not_result" = "true" ]; then
      type="warning"
      if [ "$tbb_locally_installed_version_detect_success" = "0" ]; then
         ## installed, but local version number unknown
         MSG="\
<p>$updater_vs_downloader_msg</p>
<p>$highest_version_not_always_better_text</p>
<p>$confirmation_screen_learn_more_link</p>
<p>$qubes_running_inside_template_vm_msg</p>"
      else
         ## installed, local version number known
         if [ "$dpkg_compare_versions_equals_exit_code" = "0" ]; then
            up_to_date_or_not_text="Looks like $tb_title is already up to date."
            re_install_or_install_text="Please close $tb_title if you want to (re-)install!"
         elif [ "$dpkg_compare_versions_greater_than_exit_code" = "0" ]; then
            up_to_date_or_not_text="Looks like there is an upgrade for $tb_title."
            re_install_or_install_text="Please close $tb_title if you want to (re-)install!"
         elif [ "$dpkg_compare_versions_lower_than_exit_code" = "0" ]; then
            up_to_date_or_not_text="<b><u>WARNING: Looks like a downgrade attack!</u></b>"
            re_install_or_install_text="Please close $tb_title if you want to (re-)install!"
         else
            error "Neither of the following were zero.
<br></br>dpkg_compare_versions_equals_exit_code: $dpkg_compare_versions_equals_exit_code
<br></br>dpkg_compare_versions_lower_than_exit_code: $dpkg_compare_versions_lower_than_exit_code
<br></br>dpkg_compare_versions_greater_than_exit_code: $dpkg_compare_versions_greater_than_exit_code
<br></br>
<br></br>tbb_locally_installed_version_detect_success: $tbb_locally_installed_version_detect_success"
            tb_exit_function 1
         fi
         MSG="\
<p>$highest_version_not_always_better_text</p>

<p>$up_to_date_or_not_text</p>

<p>$re_install_or_install_text</p>

<p>If your currently installed version is:<blockquote>
   - higher: you are likely target of a downgrade attack, SAY NO NOW.<br></br>
   - equal : only proceed, if you want to create a new browser profile.<br></br>
   - lower : you should upgrade.</blockquote></p>

<p>$updater_vs_downloader_msg</p>
<p>$confirmation_screen_learn_more_link</p>"
      fi
   else
      ## not installed
      type="info"
      MSG="\
<p>$highest_version_not_always_better_text</p>
<p>$confirmation_screen_learn_more_link</p>"
   fi

   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
   output_echo_only "https://www.whonix.org/wiki/Tor_Browser/Download_Confirmation_Screen"

   if [ "$tbb_version" = "" ]; then
      if [ "$TB_INPUT" = "none" ]; then
         output_echo_only "INFO: Detected versions: ${tbb_recommended_versions_slash_separated}"
         answer="$tbb_default_download_version"
      else
         local answer
         if [ "$TB_INPUT" = "stdin" ]; then
            output_echo_only "QUESTION: $question
n/${tbb_recommended_versions_slash_separated}?"
            read -r answer
            if [ "$answer" = "n" ] || [ "$answer" = "" ]; then
               output_echo_only "INFO: Canceled. Exit."
               tb_exit_function 10
            fi
         else
            #echo "/usr/lib/msgcollector/tb_updater_gui \"$type\" \"$TITLE\" \"$tbb_locally_installed_version\" \"$tbb_recommended_versions_comma_separated\" \"$MSG\" \"$question\" \"$button\")"
            answer="$("/usr/lib/msgcollector/tb_updater_gui" "$type" "$TITLE" "$tbb_locally_installed_version" "$tbb_recommended_versions_comma_separated" "$MSG" "$question" "$button")"
            if [ "$answer" = "65536" ]; then ## Button 'Yes' has not been pressed.
               output_echo_only "Canceled. Exit."
               tb_exit_function 10
            fi
         fi
      fi
      tbb_version="$answer"
      output_echo_only "INFO: Version $tbb_version chosen."
   else
      output_echo_only "INFO: Version $tbb_version was already set."
   fi
}

tb_version_processing() {
   if [ "$tbb_version_folder" = "" ]; then
      tbb_version_folder="$tbb_version"
   fi

   if echo "$tbb_version" | grep -q "hardened" ; then
      tbb_hardened_version_chosen="true"
   else
      tbb_hardened_version_chosen="false"
   fi
   output_echo_only "INFO: tbb_hardened_version_chosen: $tbb_hardened_version_chosen"

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      #echo "INFO: Tor Browser language variable is set to "$TB_LANG"."
      output_echo_only "INFO: $tb_title language variable TB_LANG is already set to '$TB_LANG'. Keeping it as is, ok."
   elif [ "$tbb_hardened_version_chosen" = "true" ]; then
      ## Quote: https://blog.torproject.org/blog/tor-browser-55a4-hardened-released
      ## "there will only be one bundle shipped supporting all the languages found in alpha builds"
      ## These links are not containing language specific strings such as 'en-US', but 'ALL'.
      output_echo_only "INFO: $tb_title language variable TB_LANG was not yet set and a hardened version was chosen. Therefore setting TB_LANG to 'ALL', ok."
      TB_LANG="ALL"
   else
      output_echo_only "INFO: $tb_title language variable TB_LANG was not yet set and no hardened version was chosen. Therefore defaulting TB_LANG to 'en-US', ok."
      TB_LANG="en-US"
   fi
}

tb_kill_already_running_tb_maybe() {
   if [ ! "$NOKILLTB" = "1" ]; then
      output_echo_only "INFO: Because you are not using --nokilltb, now killing eventually still running instances of $tb_title..."
      killall firefox || true
   fi
}

tb_download_common() {
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      progressbaridx="$(cat "/proc/sys/kernel/random/uuid")"
      tb_notify_msg="Download
----------------------------------------------------------------------
$tb_notify_details"
      if [ "$TB_INPUT" = "" ] || [ "$TB_INPUT" = "gui" ]; then
         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --parentpid "$$" --typex "info" --progressbartitlex "$TITLE" --message "$tb_notify_msg" --parentpid "$$" --done
         ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
         ## variables. (See above.)
         ## Define what CURL_PRGRS is supposed to eval.
         ## ($percent is a local variable provided by $CURL_PRGRS.)
         export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
      fi
   fi

   output_echo_only "INFO: CURL_OUT_FILE: $CURL_OUT_FILE"

   ## Debugging: Simulating endless data attack.
   #export CURL_PRGRS_MAX_FILE_SIZE_BYTES="1048576"

   curl_exit_code="0"
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --max-time "$curl_download_max_time" \
      $CURL_RESUME \
      $CURL_OPTS \
      --output "$CURL_OUT_FILE" \
      "$curl_download_target_url" \
      &

   last_pid_list="$!"
   wait "$last_pid_list" || { curl_exit_code="$?" ; true; };
   last_pid_list=""

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   if [ -x "/usr/lib/curl-scripts/curl_exit_codes" ]; then
      curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$curl_exit_code")" || true
   else
      curl_status_message="$curl_exit_code"
   fi

   if [ "$tb_download_common_exit_on_fail" = "false" ]; then
      true "$FUNCNAME is not supposed to exit, because tb_download_common_exit_on_fail is set to $tb_download_common_exit_on_fail."
      return 0
   fi

   ## Check if curl failed.
   if [ ! "$curl_exit_code" = "0" ]; then
      download_fail_help_set
      MSG="<p>Failed to download: $curl_download_target_url</p>

<p>$DOWNLOAD_FAIL_HELP</p>

<p>(Debugging information: curl_status_message: $curl_status_message)</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      tb_exit_function "$tb_download_common_exit_on_fail"
   fi

   output_echo_only "INFO: Done, downloaded $curl_download_target_url."
}

tb_download_files() {
   [ -n "$TBB_EXTRA_FOLDER" ] || TBB_EXTRA_FOLDER="${tbb_version_folder}"

   ### signature ###

   [ -n "$TBB_SIG_FILENAME" ] || TBB_SIG_FILENAME="sha256sums-unsigned-build.txt.asc"
   [ -n "$TBB_SIG_LINK" ] || TBB_SIG_LINK="${TBB_REMOTE_FOLDER}/${TBB_EXTRA_FOLDER}/${TBB_SIG_FILENAME}"
   [ -n "$TBB_SIG_FULL_PATH" ] || TBB_SIG_FULL_PATH="$tb_downloaded_files_folder/$TBB_SIG_FILENAME"

   tb_notify_details="Downloading $tb_title signature... Will take a moment..."
   output_echo_only "INFO: Downloading GPG signature... Will take a moment..."
   output_echo_only "\
INFO: Downloading:
      $TBB_SIG_LINK ... Will take a moment..."

   [ -n "$timeout_signature_file_download" ] || timeout_signature_file_download=180
   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$TBB_SIG_FULL_PATH"
   rm -f "$CURL_OUT_FILE"
   curl_download_max_time="$timeout_signature_file_download"
   curl_download_target_url="$TBB_SIG_LINK"
   tb_download_common_exit_on_fail="8"
   tb_download_common

   ### hash file ###

   [ -n "$TBB_HASH_FILENAME" ] || TBB_HASH_FILENAME="sha256sums-unsigned-build.txt"
   [ -n "$TBB_HASH_LINK" ] || TBB_HASH_LINK="${TBB_REMOTE_FOLDER}/${TBB_EXTRA_FOLDER}/${TBB_HASH_FILENAME}"
   [ -n "$TBB_HASH_FULL_PATH" ] || TBB_HASH_FULL_PATH="$tb_downloaded_files_folder/$TBB_HASH_FILENAME"

   tb_notify_details="Downloading $tb_title sha256sums file... Will take a moment..."
   output_echo_only "INFO: Downloading sha256sums file... Will take a moment..."
   output_echo_only "\
INFO: Downloading:
      $TBB_HASH_LINK ... Will take a moment..."

   [ -n "$timeout_hash_file_download" ] || timeout_hash_file_download=180
   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$TBB_HASH_FULL_PATH"
   rm -f "$CURL_OUT_FILE"
   curl_download_max_time="$timeout_hash_file_download"
   curl_download_target_url="$TBB_HASH_LINK"
   tb_download_common_exit_on_fail="16"
   tb_download_common

   ### archive file ###

   [ -n "$TBB_PACKAGE_FILENAME" ] || TBB_PACKAGE_FILENAME="tor-browser-${ARCH_DOWNLOAD}-${tbb_version}_${TB_LANG}.tar.xz"
   [ -n "$TBB_PACKAGE_LINK" ] || TBB_PACKAGE_LINK="$TBB_REMOTE_FOLDER/${TBB_EXTRA_FOLDER}/$TBB_PACKAGE_FILENAME"
   [ -n "$TBB_PACKAGE_FULL_PATH" ] || TBB_PACKAGE_FULL_PATH="$tb_downloaded_files_folder/$TBB_PACKAGE_FILENAME"

   tb_notify_details="Downloading $tb_title... Will take a while..."
   output_echo_only "INFO: Downloading $tb_title Bundle: $tbb_version"
   output_echo_only "\
INFO: Downloading:
      $TBB_PACKAGE_LINK ... Will take a while..."

   [ -n "$timeout_archive_file_download" ] || timeout_archive_file_download=3600
   ## 1 MB = 1048576 bytes
   ## 100 MB = 104857600 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="104857600"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$TBB_PACKAGE_FULL_PATH"
   ## Not deleting to support resume.
   #rm -f "$CURL_OUT_FILE"
   curl_download_max_time="$timeout_archive_file_download"
   curl_download_target_url="$TBB_PACKAGE_LINK"
   tb_download_common_exit_on_fail="17"
   tb_download_common

   tb_download_attempt_success="true"
}

tb_gpg_verify() {
   output_echo_only "INFO: GPG signature verification... This will take a moment..."

   gpg_bash_lib_input_verify_timeout_after="60"
   gpg_bash_lib_input_verify_kill_after="10"
   gpg_bash_lib_input_key_import_dir="/usr/share/torbrowser-updater-keys.d"
   gpg_bash_lib_input_temp_folder="$tb_gpg_tmp_dir"
   gpg_bash_lib_input_data_file="$TBB_HASH_FULL_PATH"
   gpg_bash_lib_input_sig_file="$TBB_SIG_FULL_PATH"
   gpg_bash_lib_input_file_name_enforce="false"
   gpg_bash_lib_input_cleanup="false"
   gpg_bash_lib_input_error_handler_extra='tb_error_handler "$gpg_bash_lib_output_error_handler_message"'
   ## One month has 2592000 seconds.
   ## (60 [seconds] * 60 [minutes] * 24 [hours] * 30 [days])
   ## Setting this to 3 months. (777600 seconds)
   ## (2592000 * 3 [months])
   [ -n "$gpg_bash_lib_input_maximum_age_in_seconds" ] || gpg_bash_lib_input_maximum_age_in_seconds="2592000"

   source "/usr/lib/gpg-bash-lib/source_all"

   gpg_bash_lib_function_main_verify

   gpg_bash_lib_output_diagnostic_message="$(/usr/lib/msgcollector/br_add "$gpg_bash_lib_output_diagnostic_message")"

   ## Not checking for gpg_bash_lib_output_alright_status, because then there
   ## would be no way to accept outdated signatures. It is not clear if it is
   ## guaranteed to have a new stable TBB release every three months.
   if [ ! "$gpg_bash_lib_output_validsig_status" = "true" ] || [ "$gpg_bash_lib_output_failure" = "true" ] ; then
      local MSG="<p><b>GPG download signature could NOT be verified.</b>
<br></br>$tb_title update failed! Try again later.</p>

<p>gpg_bash_lib_output_alright_status: $gpg_bash_lib_output_alright_status
<br></br>gpg_bash_lib_output_failure: $gpg_bash_lib_output_failure</p>

<p>gpg_bash_lib_output_diagnostic_message:</p>

<p>$gpg_bash_lib_output_diagnostic_message</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      tb_exit_function 12
   fi

   output_echo_only "INFO: GPG signature verification ok."
}

tb_hash_verify() {
   output_echo_only "INFO: Checking hash... This will take a moment..."

   rm --force "$tb_temp_folder/sha256_output"

   local first second
   local sha256sum_output sha256sum

   local timeout_after kill_after file_name
   timeout_after="180"
   kill_after="30"

   ## for relative paths
   pushd "$tb_downloaded_files_folder" >/dev/null

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   tb_sha_exit_code="0"

   timeout --kill-after="$kill_after" "$timeout_after" \
      sha256sum \
         "$TBB_PACKAGE_FILENAME" \
         > "$tb_temp_folder/sha256_output" \
         2>&1 \
         &

   lastpid="$!"
   wait "$lastpid" || { tb_sha_exit_code="$?" ; true; };

   sha256sum_output="$(cat "$tb_temp_folder/sha256_output")" || true

   popd >/dev/null

   if grep -q "$sha256sum_output" "$TBB_HASH_FULL_PATH" ; then
      output_echo_only "INFO: Hash check ok."
      return 0
   fi

   download_fail_help_set
   output_echo_only "ERROR: Hash check failed! (tb_sha_exit_code: $tb_sha_exit_code) Exiting." >&2
   local MSG="<p><b>Hash could NOT be verified. (tb_sha_exit_code: $tb_sha_exit_code)</b>

<p>$DOWNLOAD_FAIL_HELP</p>"
   $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
   tb_exit_function 13
}

tb_confirm_install() {
   if [ "$tb_confirm_installation_skip" = "true" ]; then
      return 0
   fi

   local MSG question button answer type clock_hint
   local signature_freshness_msg signature_creation_msg
   local last_used_gpg_bash_lib_output_signed_on_date
   local last_used_gpg_bash_lib_output_signed_on_unixtime

   if [ -f "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_date" ]; then
      last_used_gpg_bash_lib_output_signed_on_date="$(cat "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_date")" || true
   fi
   if [ "$last_used_gpg_bash_lib_output_signed_on_date" = "" ]; then
      last_used_gpg_bash_lib_output_signed_on_date="Unknown. Probably never downloaded a signature before."
   fi
   if [ -f "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_unixtime" ]; then
      last_used_gpg_bash_lib_output_signed_on_unixtime="$(cat "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_unixtime")" || true
   fi
   if [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" = "" ]; then
      last_used_gpg_bash_lib_output_signed_on_unixtime="unknown"
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/054
   if [[ "$last_used_gpg_bash_lib_output_signed_on_unixtime" != *[!0-9]* ]]; then
      true "'$last_used_gpg_bash_lib_output_signed_on_unixtime' is strictly numeric."
      if [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" -lt "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="The downloaded signature is newer than the last known signature as expected."
         type="info"
      elif [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" -gt "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="<b>You are likely target of a downgrade attack</b>, SAY NO NOW! The downloaded signature is older than the last known signature. \
Unless you are downgrading, you should abort now and try again later!"
         type="warning"
      elif [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" = "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="<b>You could be target of an indefinite freeze attack!</b> The downloaded signature has the same creation date as the last known signature. \
Unless you are re-installing the same version, you should abort now and try again later!"
         type="warning"
      else
         error "last_used_gpg_bash_lib_output_signed_on_unixtime $last_used_gpg_bash_lib_output_signed_on_unixtime \
neither -lt, -gt nor equals gpg_bash_lib_output_signed_on_unixtime $gpg_bash_lib_output_signed_on_unixtime"
         type="error"
      fi
   else
      signature_freshness_msg="We have not previously accepted a signature yet. Therefore assisted check for downgrade \
or indefinite freeze attacks skipped. Please check the Current Signature Creation Date looks sane."
      type="info"
   fi

   if [ -f /usr/share/whonix/marker ]; then
      clock_hint="In that case, please check your clock is correct."
   fi

   case "$gpg_bash_lib_output_freshness_detail" in
      "lenient")
         signature_creation_msg="<b>Your clock might be slow.</b> $clock_hint
<br></br>
<br></br>According to your system clock, the signature was created $gpg_bash_lib_output_signed_on_unixtime_minus_current_unixtime_pretty before current time.
You can probably ignore this, because it still is within range. (Okay up to $gpg_bash_lib_output_maximum_age_pretty_output before.)"
         ;;
      "slow")
         signature_creation_msg="<b>Your clock might be slow.</b> $clock_hint
<br></br>
<br></br>According to your system clock, the signature was created $gpg_bash_lib_output_signed_on_unixtime_minus_current_unixtime_pretty before current time."
         ;;
      "outdated")
         signature_creation_msg="<b>The signature looks quite old already.</b>
<br></br>
<br></br>Either,
<br></br>- your clock might be fast (at least $gpg_bash_lib_output_in_future_pretty_output fast). $clock_hint
<br></br>- there is really no newer signature yet. The signature is really older than $gpg_bash_lib_output_maximum_age_pretty_output already. (Older than $gpg_bash_lib_output_in_future_pretty_output already.)
<br></br>- this is a $SCRIPTNAME bug
<br></br>- this is an attack"
         ;;
      "current")
         signature_creation_msg="According to your system clock, the signature was created $gpg_bash_lib_output_current_unixtime_minus_signed_on_unixtime_pretty ago."
         ;;
      *)
         error "gpg_bash_lib_output_freshness_detail is neither lenient, nor slow, nor outdated, nor current, it is: $gpg_bash_lib_output_freshness_detail"
         return 0
         ;;
   esac

   gpg_bash_lib_output_gpg_verify_output_br_added="$(/usr/lib/msgcollector/br_add "$gpg_bash_lib_output_gpg_verify_output")"

   MSG="<p><b>Installation confirmation</b></p><p><table><tr>
<td>Currently installed version:</td> <td><tt> $tbb_locally_installed_version</tt></td></tr><tr>
<td>Downloaded version         :</td> <td><tt> $tbb_version</tt></td></tr></table></p>
<p>$signature_freshness_msg</p><p><table><tr>
<td>Previous Signature Creation Date:</td> <td><tt> $last_used_gpg_bash_lib_output_signed_on_date</tt></td></tr><tr>
<td>Last Signature Creation Date    :</td> <td><tt> $gpg_bash_lib_output_signed_on_date</tt></td></tr></table></p>
<p>$signature_creation_msg</p>
<p><u>gpg reports</u>:<br></br>
$gpg_bash_lib_output_gpg_verify_output_br_added</p>
<p><a href=https://www.whonix.org/wiki/Tor_Browser/Installation_Confirmation_Screen>Learn more about this Installation Confirmation Screen.</a></p>"

   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
   output_echo_only "https://www.whonix.org/wiki/Tor_Browser/Installation_Confirmation_Screen"

   button="yesno"
   question="Install now?"

   if [ "$TB_INPUT" = "none" ]; then
      true "INFO: TB_INPUT is set to $TB_INPUT, continuing without asking."
   else
      if [ "$TB_INPUT" = "stdin" ]; then
         output_echo_only "QUESTION: $question
y/n?"
         read -r answer
         if [ ! "$answer" = "y" ]; then
            output_echo_only "INFO: Canceled. Exit."
            tb_exit_function 14
         fi
      else
         answer="$(/usr/lib/msgcollector/generic_gui_message "$type" "$TITLE" "$MSG" "$question" "$button")"
         if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
            output_echo_only "INFO: Canceled. Exit."
            tb_exit_function 14
         fi
      fi
   fi

   echo "$gpg_bash_lib_output_signed_on_date" > "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_date"
   echo "$gpg_bash_lib_output_signed_on_unixtime"  > "$tb_cache_folder/last_used_gpg_bash_lib_output_signed_on_unixtime"
}

tb_extract() {
   if [ "$TB_NO_EXTRACT" = "true" ]; then
      true "INFO: Skipping $FUNCNAME, because TB_NO_EXTRACT is 'true', ok."
      return 0
   fi

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      progressbaridx="$(cat "/proc/sys/kernel/random/uuid")"
      tb_notify_msg="Extraction
----------------------------------------------------------------------
Extracting $tb_title... This could take a moment..."
      if [ "$TB_INPUT" = "" ] || [ "$TB_INPUT" = "gui" ]; then
         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --parentpid "$$" --typex "info" --progressbartitlex "$TITLE" --message "$tb_notify_msg" --parentpid "$$" --done
      fi
   fi

   local timeout_after kill_after file_name
   timeout_after="180"
   kill_after="30"
   file_name="$TBB_PACKAGE_FULL_PATH"

   output_echo_only "INFO: Extracting $file_name ..."

   ## Folder must be already exist, otherwise `tar` would fail.
   mkdir --parents "$tb_extract_temp_folder"

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   ## `tar` vs `bsdtar`
   ##
   ## Using `bsdtar` because it can auto detect the archive type.
   ## When using `tar` in a pipe, we would need to explicitly set '--xz'.
   ##
   ## Using '--strip-components 1':
   ## - Because we are also using '--directory "$tb_extract_temp_folder"'
   ## - To remove language specific default folder names such as tor-browser_en-US.

   tb_tar_exit_code="0"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      timeout \
         --kill-after="$kill_after" \
         "$timeout_after" \
            bsdtar \
               --strip-components 1 \
               --extract \
               --directory "$tb_extract_temp_folder" \
               --file "$file_name" \
               &

      lastpid="$!"
      wait "$lastpid" || { tb_tar_exit_code="$?" ; true; };
   else
      pv_echo_command='echo "extraction percent done: "$percent" / 100" >&2'
      pv_wrapper_command="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
      export pv_wrapper_command pv_echo_command

      local tar_fifo tar_pid pv_wrapper_fifo pv_wrapper_fifo
      local pv_exit_code tar_exit_code pv_wrapper_exit_code
      tar_fifo="$TEMP_DIR/tar_fifo"
      pv_wrapper_fifo="$TEMP_DIR/pv_wrapper_fifo"
      pv_exit_code="0"
      tar_exit_code="0"
      pv_wrapper_exit_code="0"

      rm --force "$tar_fifo"
      rm --force "$pv_wrapper_fifo"
      mkfifo "$tar_fifo"
      mkfifo "$pv_wrapper_fifo"

      timeout \
         --kill-after="$kill_after" \
         "$timeout_after" \
            bsdtar \
               --strip-components 1 \
               --extract \
               --directory "$tb_extract_temp_folder" \
               --file \
               - \
               < "$tar_fifo" \
               &
      tar_pid="$!"
      last_pid_list+=" $tar_pid"

      timeout \
         --kill-after="$kill_after" \
         "$timeout_after" \
            bash \
               /usr/lib/msgcollector/pv_wrapper \
               < "$pv_wrapper_fifo" \
               &
      pv_wrapper_pid="$!"
      last_pid_list+=" $pv_wrapper_pid"

      timeout \
         --kill-after="$kill_after" \
         "$timeout_after" \
            pv \
               -n \
               "$file_name" \
               1> "$tar_fifo" \
               2> "$pv_wrapper_fifo" \
               &
      pv_pid="$!"
      last_pid_list+=" $pv_pid"

      wait "$pv_pid" || { pv_exit_code="$?" ; true; };
      wait "$tar_pid" || { tar_exit_code="$?" ; true; };
      wait "$pv_wrapper_pid" || { pv_wrapper_exit_code="$?" ; true; };

      if [ ! "$pv_exit_code" = "0" ]; then
         tb_tar_exit_code="1"
      fi
      if [ ! "$tar_exit_code" = "0" ]; then
         tb_tar_exit_code="1"
      fi
      if [ ! "$pv_wrapper_exit_code" = "0" ]; then
         tb_tar_exit_code="1"
      fi
   fi

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   if [ ! "$tb_tar_exit_code" = "0" ]; then
      local MSG="<p><b>Could not extract $file_name!</b>
<br></br>
<br></br>(Debugging information:
<br></br>tar exit code: $tb_tar_exit_code
<br></br>pv_exit_code: $pv_exit_code
<br></br>tar_exit_code: $tar_exit_code
<br></br>pv_wrapper_exit_code: $pv_wrapper_exit_code)
<br></br>
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      tb_exit_function 15
   fi

   output_echo_only "INFO: Extraction of $file_name done."
}

tb_patch_download_folder_create() {
   mkdir --parents "$tb_extract_temp_folder/Browser/Downloads"
}

tb_patch() {
   if [ "$TB_NO_PATCH" = "true" ]; then
      true "INFO: Skipping $FUNCNAME, because TB_NO_PATCH is 'true', ok."
      return 0
   fi

   tb_run_function tb_patch_download_folder_create
}

tb_move_old_version() {
   shopt -s nullglob
   local keep_counter

   if [ "$TB_NO_MOVE_OLD_VERSION" = "true" ]; then
      true "INFO: Skipping $FUNCNAME, because TB_NO_MOVE_OLD_VERSION is 'true', ok."
      return 0
   fi

   if [ -d "$tb_browser_folder" ]; then
      output_echo_only "INFO: Moving old folder $tb_browser_folder..."
      mv "$tb_browser_folder" "$tb_browser_folder.old.$(date '+%F-%H:%M:%S')"
   fi

   if [ -z "$TB_KEEP_OLD_VERSIONS_COUNT" ]; then
      TB_KEEP_OLD_VERSIONS_COUNT=3
   fi
   if [ "$TB_KEEP_OLD_VERSIONS_COUNT" = "all" ]; then
      true "INFO: Keeping all old versions because TB_KEEP_OLD_VERSIONS_COUNT set to 'all', ok."
      return 0
   fi

   keep_count="$TB_KEEP_OLD_VERSIONS_COUNT"

   for old_folder in $(ls -dr "$tb_browser_folder.old."*); do
      if ! [ -d "$old_folder" ]; then
         continue
      fi
      if [ "$keep_count" -eq 0 ]; then
         output_echo_only "INFO: Removing '$old_folder'"
         rm -rf "$old_folder"
      else
         ((keep_count--))
      fi
   done
}

tb_install() {
   if [ "$TB_NO_INSTALL" = "true" ]; then
      true "INFO: Skipping $FUNCNAME, because TB_NO_INSTALL is 'true', ok."
      return 0
   fi

   output_echo_only "INFO: Moving temporary folder $tb_extract_temp_folder to $tb_browser_folder."
   mv "$tb_extract_temp_folder" "$tb_browser_folder"

   if [ "$tb_bin" = "i2pbrowser" ]; then
      rm -rf "$tb_home_folder/profile.i2p"
      cp -r /var/lib/tb-profile-i2p/profile.i2p "$tb_home_folder/profile.i2p"
   fi
}

tb_cleanup() {
   if [ "$TB_NO_INSTALL" = "true" ]; then
      true "INFO: Skipping $FUNCNAME, because TB_NO_INSTALL is 'true', ok."
      return 0
   fi

   output_echo_only "INFO: Deleting no longer required file $TBB_PACKAGE_FULL_PATH to save space."
   rm -f "$TBB_PACKAGE_FULL_PATH"
}

tb_chroot_pre_exit() {
   if [ "$tb_reenable_anon_ws_dnf_conf" = "true" ]; then
      ## Restore anon-ws-dns-conf /etc/resolv.conf.
      bash -x /var/lib/dpkg/info/anon-ws-dns-conf.postinst configure
   fi
}

tb_hardcoded_version_last_downloaded_save() {
   echo "$tbb_version" > "$tbb_version_last_downloaded_save_file"
   output_echo_only "INFO: Saved $tbb_version in $tbb_version_last_downloaded_save_file."
}

tb_start_ask() {
   if [ "$noaskstart" = "true" ]; then
      true "INFO: noaskstart is set to true. Skipping question if $tb_title should be started."
      return 0
   fi

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      output_echo_only "INFO: Finished installing $tb_title. Can be found in $tb_browser_folder."
      output_echo_only "INFO: Not starting $tb_title, because variable TB_FORCE_INSTALL is set to 1."
      return 0
   fi

   local command_v_torbrowser_exit_code="0"
   command -v $tb_bin || { command_v_torbrowser_exit_code="$?" ; true; };

   if [ ! "$command_v_torbrowser_exit_code" = "0" ]; then
      output_echo_only "INFO: $tb_bin binary not found in path. tb-starter is probably not installed. \
Skipping question to start $tb_title."
      return 0
   fi

   if [ "$noaskstart" = "false" ]; then
      true "noaskstart is 'false'"
   else
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         MSG="<p>Finished installing $tb_title. Can be found in $tb_browser_folder.</p>

<p>Not asking to start $tb_title, because running in a TemplateVM</p>"
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
         return 0
      fi
   fi

   MSG="<p>Finished installing $tb_title. Can be found in $tb_browser_folder.</p>

<p>Please donate!
<br></br><a href=https://www.whonix.org/wiki/Donate>https://www.whonix.org/wiki/Donate</a></p>"
   local question="Start $tb_title?"
   local button="yesno"
   local answer

   if [ "$TB_INPUT" = "none" ]; then
      true "INFO: TB_INPUT is set to $TB_INPUT. Skipping question if $tb_title should be started."
      return 0
   fi

   if [ "$TB_INPUT" = "stdin" ]; then
      output_echo_only "QUESTION: $question
y/n?"
      read -r answer
      if [ ! "$answer" = "y" ]; then
         output_echo_only "INFO: Canceled starting $tb_title, ok."
      else
         $tb_bin
      fi
      return 0
   fi

   answer="$(/usr/lib/msgcollector/generic_gui_message "info" "$TITLE" "$MSG" "$question" "$button")"
   if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
      output_echo_only "INFO: Canceled starting $tb_title, ok."
      return 0
   else
      $tb_bin
      return 0
   fi
}

tb_sort_remote_versions() {
   if [ "$tbb_recommended_versions_list" = "" ]; then
      error "tbb_recommended_versions_list was empty before sorting."
   fi

   ## Example tbb_recommended_versions_list:
   ## 2.3.25-16 3.8 2.6 3.7 3.1 3.1 3.4 2.3.25-15 3.5

   ## Add new lines. Required by `sort`.
   ## Do not quote tbb_recommended_versions_list.
   tbb_recommended_versions_list="$(printf "%s\n" $tbb_recommended_versions_list)"

   tbb_recommended_versions_list="$(echo "$tbb_recommended_versions_list" | sort --unique --version-sort)"

   if [ "$tbb_recommended_versions_list" = "" ]; then
      error "tbb_recommended_versions_list is empty after sorting."
   fi

   ## Example tbb_recommended_versions_list:
   ## 3.8
   ## 3.7
   ## 3.5
   ## 3.4
   ## 3.1
   ## #2.6
   ## 2.3.25-16
   ## 2.3.25-15

   ## Choose lowest version number for default file download. Only used for TB_FORCE_INSTALL.
   read -r -t 2 tbb_default_download_version _ <<< "$tbb_recommended_versions_list"

   ## Thanks to:
   ## https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable/3352015#3352015
   ## for the leading/trailing whitespace removal code

   local temp
   temp="${tbb_recommended_versions_list//$'\n'/,}"
   temp="${temp#"${temp%%[![:space:]]*}"}" ## remove leading whitespace characters
   temp="${temp%"${temp##*[![:space:]]}"}" ## remove trailing whitespace characters
   tbb_recommended_versions_comma_separated="$temp"

   temp="${tbb_recommended_versions_list//$'\n'//}"
   temp="${temp#"${temp%%[![:space:]]*}"}" ## remove leading whitespace characters
   temp="${temp%"${temp##*[![:space:]]}"}" ## remove trailing whitespace characters
   tbb_recommended_versions_slash_separated="$temp"
}

main_function() {
   tb_run_function root_check "$@"
   tb_run_function tb_sanity_tests
   tb_run_function tb_parse_cmd_options "$@"
   tb_run_function tb_preparation
   tb_run_function tb_config_folder_parser

   tb_run_function tb_stdin
   tb_run_function tb_qubes_dvm_template
   tb_run_function tb_local_version_detection
   tb_run_function tb_skip_if_higher_or_equal_version_already_downloaded
   tb_run_function tb_connectivity_checks_tor
   tb_run_function tb_connectivity_checks_curl
   tb_run_function tb_update_check
   tb_run_function tb_remote_version_parser
   tb_run_function tb_remote_version_sanity_test

   ## For testing:
   #tbb_recommended_versions_list="2.3.25-16 3.8 2.6 3.7 3.1 3.1 3.4 2.3.25-15 3.5"
   #tbb_recommended_versions_list="2.3.25-16 2.3.25-15 $tbb_recommended_versions_list 10.0 15.0 20.0 25.0 30.0"

   tb_run_function tb_sort_remote_versions
   tb_run_function tb_confirm_update
   tb_run_function tb_version_processing
   tb_run_function tb_kill_already_running_tb_maybe
   tb_run_function tb_download_files
   tb_run_function tb_gpg_verify
   tb_run_function tb_hash_verify
   tb_run_function tb_confirm_install
   tb_run_function tb_extract
   tb_run_function tb_patch
   tb_run_function tb_move_old_version
   tb_run_function tb_install
   tb_run_function tb_cleanup
   tb_run_function tb_hardcoded_version_last_downloaded_save
   tb_run_function tb_chroot_pre_exit
   tb_run_function tb_start_ask
}

tb_run_function main_function "$@"
